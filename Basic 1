					@@@@@ Aura Lightning Component @@@@@
																
		The Lightning Component framework is a UI framework for developing web apps for mobile and desktop devices. It’s a modern framework for building single-page applications with dynamic, responsive user interfaces for Lightning Platform apps. It uses JavaScript on the client side and Apex on the server side.
		
		 - Lightning Out is a feature that extends Lightning apps. It acts as a bridge to surface Lightning components in any 
	
	(#)  Is Lightning Components built on the MVC pattern?
				In a word, no. There are similarities, to be sure, but it would be more correct to say that Lightning Components is View-Controller-Controller-Model, or perhaps View-Controller-Controller-Database.
				Why is “controller” doubled up in that pattern name? Because when interacting with Salesforce, your components will have a server-side controller in addition to the client-side controller we’ve worked with in this unit. This dual controller design is the key difference between Lightning Components and MVC.
	
	(#)   The first issue is case sensitivity, and this boils down to Apex and Salesforce in general are case-insensitive, but JavaScript is case-sensitive. That is, “Name” and “name” are the same in Apex, but different in JavaScript.

	(*) When writing markup, you can add a component to an app, but you can’t add an app to another app, or an app to a component.
	
	(*) You can’t add apps to Lightning Experience or the Salesforce app—you can only add components. 
	
	(*)  We can keep nesting components inside other components down to pretty much any level you’d care to.-- which lead to a fully function app
	
	
																	@@@@ Aura Basic2 @@@@

		(*) We can include HTML markups in Aura 
			
		(*) Attributes on components are like instance variables in objects. They’re a way to save values that change, and a way to name those value placeholders. 
		
		(#) Basicly what we do is, we  get-process-set  component in JS
					NOTE:
						although we got auto updation in client-side controller BUT in helper we have to set it at last to reflect it.
		
		
		(#)  What component.set() does here isn’t update the value of the expenses attribute. It triggers notification that the expenses attribute has changed.
			 The effect is that, anywhere in your app that you’ve referenced the expenses attribute in an expression, the value of that expression is updated, and that update cascades everywhere the expenses attribute was used.
			 
			 
		
		(#) ATTRIBUTE DATA TYPE:
					1. Primitives data types, such as Boolean, Date, DateTime, Decimal, Double, Integer, Long, or String. 
					2. Standard and custom Salesforce objects, such as Account or MyCustomObject__c.
					3. Collections, such as List, Map, and Set.
					4. Custom Apex classes.
					5. Framework-specific types, such as Aura.Component, or Aura.Component[].
				thetefore 
					EX 1:	<aura:attribute name="expense" type="Expense__c"/>  -------  is Great
					EX2 :
							<aura:attribute name="messages" type="List" default="['You look nice today.', 'Great weather we\'re having.','How are you?']"/>
							
		
		(#)  We can add multiple instances of the same component with different attributes. they might have same aura:id, Therefore when we call componentInstance.find('aura:id')
		     it can return a single component or an array of component.
				
		(#)  A component’s helper is the appropriate place to put code to be shared between several different action handlers.
			 A component’s helper is a great place to put complex processing details, so that the logic of your action handlers remains clear and streamlined.
			 
			 
		
		(#)	  ui:inputText namespace don’t come with SLDS styling	but lightning:input does
		
		(#)  "c."  =============>> meaning we are calling controller property
		
		(#)  "v."  =============>> meaning we are accessing markup property
		
________________________________________________________________________________________________________________________________________________________________________________________

								  
	(#) CALLING COMPONENT AND ASSIGNING ATTRIBUTE VALUE:-
				1. <c:ComponrntName attributeName=""/>
				
				 
	(#) ACCESSING ATTRIBUTE:-
				1. in component markup:-  {!v.attributeName}    --------------------------------------------------->> value Provider "v." means value and "c." mean Controller-> Handle events

				  {!'Hello! ' + v.attributeName}  		  --- CORRECT
				  {!$Label.c.Greeting + v.attributeName}  --- CORRECT
				  {!v.account.Id} accesses the Id field of an account record. For deeply nested objects and attributes, continue adding dots to traverse the structure and access the nested values.
				
